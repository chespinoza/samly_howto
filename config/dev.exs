use Mix.Config

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we use it
# with brunch.io to recompile .js and .css sources.
config :samly_howto, SamlyHowtoWeb.Endpoint,
  #http: [port: {:system, "PORT"}],
  https: [
    port: 4443,
    otp_app: :samly_howto,
    keyfile: "priv/keys/samly.pem",
    certfile: "priv/keys/samly.crt"
  ],
  url: [host: {:system, "HOST"}],
  debug_errors: true,
  code_reloader: true,
  check_origin: false,
  watchers: [
    node: [
      "node_modules/brunch/bin/brunch",
      "watch",
      "--stdin",
      cd: Path.expand("../assets", __DIR__)
    ]
  ]

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# command from your terminal:
#
#     openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 -subj "/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com" -keyout priv/server.key -out priv/server.pem
#
# The `http:` config above can be replaced with:
#
#     https: [port: 4000, keyfile: "priv/server.key", certfile: "priv/server.pem"],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Watch static and templates for browser reloading.
config :samly_howto, SamlyHowtoWeb.Endpoint,
  live_reload: [
    patterns: [
      ~r{priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$},
      ~r{priv/gettext/.*(po)$},
      ~r{lib/samly_howto_web/views/.*(ex)$},
      ~r{lib/samly_howto_web/templates/.*(eex)$}
    ]
  ]

# Do not include metadata nor timestamps in development logs
config :logger, :console, format: "[$level] $message\n"

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

# #### Identity Provider ID choices
#
# IdP ID from `:path_segment` is used OOTB.
# Set this to `:subdomain` when sub-domain in the hostname is to be treated as IdP ID.
config :samly, Samly.Provider,
  idp_id_from: :path_segment,
  service_providers: [
    %{
      id: "sp1",
      #entity_id: "urn:samly.howto:sp1",
      certfile: "priv/keys/samly.crt",
      keyfile: "priv/keys/samly.pem",
      #contact_name: "Samly Howto SP1 Admin",
      #contact_email: "sp1-admin@samly.howto",
      #org_name: "Samly Howto SP1",
      #org_displayname: "Samly Howto SP1 Displayname",
      #org_url: "https://samly.howto:4443"
    }
  ],
  identity_providers: [
    %{
      id: "idp1",
      sp_id: "sp1",
      base_url: "http://samly.howto:4443/sso",
      metadata_file: "priv/keys/idp_metadata.xml",
      pre_session_create_pipeline: SamlyHowtoWeb.Plugs.SamlyPipeline,
      use_redirect_for_req: true,
      sign_requests: false,
      sign_metadata: false,
      signed_assertion_in_resp: false,
      signed_envelopes_in_resp: false,
      allow_idp_initiated_flow: false,
    }
  ]
